from keras.datasets import imdb

#Load most frequently occuring word, i.e.only 10000 words
(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words = 10000) 

print(type([max(sequence) for sequence in train_data]))
# Find the maximum of all max indexes
max([max(sequence) for sequence in train_data])

import numpy as np

def vectorize_sequences(sequences, dimension=10000):
    results = np.zeros((len(sequences), dimension))    # Creates an all zero matrix of shape (len(sequences),10K)
    for i,sequence in enumerate(sequences):
        results[i,sequence] = 1                        # Sets specific indices of results[i] to 1s
    return results
# Vectorize training Data
X_train = vectorize_sequences(train_data)
# Vectorize testing Data
X_test = vectorize_sequences(test_data)

X_train[0]

X_train.shape


y_train = np.asarray(train_labels).astype('float32')
y_test  = np.asarray(test_labels).astype('float32')

from keras import models
from keras import layers
model = models.Sequential()
model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))
model.add(layers.Dense(16, activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))


from tensorflow.keras import optimizers
from keras import losses
from keras.metrics import *
model.compile(loss='binary_crossentropy', optimizer= 'adam', metrics=['accuracy'])

# Input for Validation
X_val = X_train[:10000]
partial_X_train = X_train[10000:]
# Labels for validation
y_val = y_train[:10000]
partial_y_train = y_train[10000:]

history = model.fit(partial_X_train,
                   partial_y_train,
                   epochs=20,
                   batch_size=512,
                   validation_data=(X_val, y_val))

history_dict = history.history
history_dict.keys()
# history_dict contain 'loss', 'binary_accuracy', 'val_loss', 'val_binary_accuracy'

import matplotlib.pyplot as plt
%matplotlib inline

# Plotting losses
loss_values = history_dict['loss']
val_loss_values = history_dict['val_loss']
epochs = range(1, len(loss_values) + 1)
plt.plot(epochs, loss_values, 'bo', label="Training Loss")
plt.plot(epochs, val_loss_values, 'b', label="Validation Loss")
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss Value')
plt.legend()
plt.show()

# Training and Validation Accuracy
acc_values = history_dict['accuracy']
val_acc_values = history_dict['val_accuracy']
epochs = range(1, len(loss_values) + 1)
plt.plot(epochs, acc_values, 'ro', label="Training Accuracy")
plt.plot(epochs, val_acc_values, 'r', label="Validation Accuracy")
plt.title('Training and Validation Accuraccy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

model.fit(partial_X_train,
          partial_y_train,
                   epochs=3,
                   batch_size=512,
                   validation_data=(X_val, y_val))

# Making Predictions for testing data
np.set_printoptions(suppress=True)
result = model.predict(X_test)
result

y_pred = np.zeros(len(result))
for i, score in enumerate(result):
    if score > 0.5 :
       y_pred[i] = 1 
    else : 
       0

print("Array of positive and Negative Review : ")
print("Positive Review = 1 \nNegative Review = 0 \n",y_pred)

from sklearn.metrics import mean_absolute_error
MAE = mean_absolute_error(y_pred, y_test)
print("Mean Absolute Error = ", MAE)

from sklearn.metrics import accuracy_score
Accuracy = accuracy_score(y_pred, y_test)
print("Accuracy score = ",Accuracy)
