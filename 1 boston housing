import tensorflow as tf
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

df = pd.read_csv('Boston-house-price-data.csv')

df

df.shape

df.isnull().sum()

df_x = df.drop(['MEDV'],axis=1)
df_y = df['MEDV']

x_train, x_test, y_train, y_test = train_test_split(df_x, df_y, test_size=0.2, random_state=1)

# initialize the linear regression model
reg = LinearRegression()
reg.fit(x_train, y_train)
lin_y_pred = reg.predict(x_test)

mse = mean_squared_error(y_test, lin_y_pred)
print("Mean Squared Error: ", mse)
print("Accuracy of model: ", 100-mse,'%')

model = Sequential()
model.add(Dense(128, activation='relu', input_shape=(13,)))
model.add(Dense(64, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(1))

model.summary()

model.compile(loss='mse', optimizer='adam', metrics=['mae'])

model.fit(x_train, y_train, epochs=100, batch_size=4, validation_data=(x_test, y_test))

lin_y_pred

#a = y_pred
dnn_y_pred = model.predict(x_test)
print("Predicted Output: ", dnn_y_pred)

mse = mean_squared_error(y_test, dnn_y_pred)
print("Mean Squared Error: ", mse)
print("Accuracy of model: ", 100-mse,'%')
